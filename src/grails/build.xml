<project name="grails" default="help">

	<property name="servlet.version" value="2.3"/>
	<property name="path" value="" />
	
    <taskdef name="groovyc"
	    classname="org.codehaus.groovy.ant.Groovyc">
	</taskdef>
    	
	<target name="help">
		<echo>Usage: grails [target]

Targets:
"create-app"          - Create a new grails app
"create-controller"   - Create a new controller
"create-service"      - Create a new service
"create-domain-class" - Create a new domain class
"create-test-suite"   - Create a new test suite
"generate-controller" - Generates a controller from a domain class
"generate-views"      - Generates the views from a domain class
"generate-all"        - Generates the all artifacts from a domain class
"test-app"            - Run current app's unit tests
"run-app"             - Run the application locally and wait
"create-webtest"      - Create the functional test layout              (coming soon)
"generate-webtest"    - Generate a functional test from a domain class (coming soon)
"run-webtest"         - Run the functional tests for a running app     (coming soon)
        </echo>
	</target>
	
    <target name="generate-controller" description="Generates a controller from a domain class">
		<property environment="env"/>
		<fail unless="env.GRAILS_HOME" message="GRAILS_HOME is not set."/>
		<property name="grails.home" location="${env.GRAILS_HOME}"/>

		<path id="test.classpath">
			<!--<pathelement location="${grails.home}/src/web-app/WEB-INF"/>-->
            <pathelement location="${basedir}/tmp/war/WEB-INF"/>
            <pathelement location="${basedir}/tmp/war/WEB-INF/classes"/>
            <fileset dir="${grails.home}/lib"/>
			<fileset dir="${grails.home}/dist"/>
			<fileset dir="lib"/>
		</path>
		<java classpathref="test.classpath" classname="grails.util.GenerateUtils" fork="true">
             <arg value="controller" />
             <arg value="${domain.class.name}" />
<!--			<jvmarg value="-Xdebug"/>
			<jvmarg value="-Xrunjdwp:transport=dt_socket,address=50010,suspend=y,server=y"/> -->
		</java>
    </target>
	
    <target name="generate-views" depends="package" description="Generates the views from a domain class">
		<property environment="env"/>
		<fail unless="env.GRAILS_HOME" message="GRAILS_HOME is not set."/>
		<property name="grails.home" location="${env.GRAILS_HOME}"/>

		<input addproperty="domain.class.name" message="Enter domain class name:" />

		<path id="test.classpath">
            <pathelement location="${basedir}/tmp/war/WEB-INF"/>
            <pathelement location="${basedir}/tmp/war/WEB-INF/classes"/>
            <fileset dir="${grails.home}/lib"/>
			<fileset dir="${grails.home}/dist"/>
			<fileset dir="lib"/>
		</path>
		<java classpathref="test.classpath" classname="grails.util.GenerateUtils" fork="true">
             <arg value="view" />
             <arg value="${domain.class.name}" />
		</java>
    </target>

    <target name="generate-all" depends="package" description="Generates the all artifacts from a domain class">

		<input addproperty="domain.class.name" message="Enter domain class name:" />

		<path id="test.classpath">
            <pathelement location="${basedir}/tmp/war/WEB-INF"/>
            <pathelement location="${basedir}/tmp/war/WEB-INF/classes"/>
            <fileset dir="${grails.home}/lib"/>
			<fileset dir="${grails.home}/dist"/>
			<fileset dir="lib"/>
		</path>
		<java classpathref="test.classpath" classname="grails.util.GenerateUtils" fork="true">
             <arg value="view" />
             <arg value="${domain.class.name}" />
		</java>
		<java classpathref="test.classpath" classname="grails.util.GenerateUtils" fork="true">
             <arg value="controller" />
             <arg value="${domain.class.name}" />
		</java>		
    </target>	


    <target name="create-app" description="Create a new grails app">
		
		<input addproperty="project.name" message="Enter application name:" />
		
		<antcall target="init">
			<param name="path" value="${project.name}/"/>
		</antcall>
		
		<script language="groovy">
			def projName = grails.getProperty("project.name")			
			grails.setProperty("project.class.name", projName[0].toUpperCase() + projName[1..-1])
		</script>		
		
			<copy 	file="${grails.home}/src/grails/templates/artifacts/DataSource.groovy"
				    tofile="${project.name}/grails-app/conf/ApplicationDataSource.groovy"/>
			<copy 	file="${grails.home}/src/grails/templates/artifacts/BootStrap.groovy" 
					tofile="${project.name}/grails-app/conf/ApplicationBootStrap.groovy"/>		
		
	</target>
	
	<target name="create-controller" depends="init:grailsHome" description="Create a new controller">
		
		<input addproperty="controller.name" message="Enter controller name:" />
		
		<script language="groovy">
			def ctrlName = grails.getProperty("controller.name")		
			ctrlName     = ctrlName[0].toUpperCase() + ctrlName[1..-1]
			if (ctrlName.endsWith('Controller')) ctrlName = ctrlName[0..-11]
			grails.setProperty("controller.class.name", ctrlName)
		</script>
				
		<copy 	file="${grails.home}/src/grails/templates/artifacts/Controller.groovy" 
				tofile="grails-app/controllers/${controller.class.name}Controller.groovy"
                overwrite="false"/>
		
		<replace 	file="grails-app/controllers/${controller.class.name}Controller.groovy" 
					token="@controller.name@" 
					value="${controller.class.name}" />	
		<echo>Created controller: grails-app/controllers/${controller.class.name}Controller.groovy</echo>
        <property name="test.suite.name" value="${controller.class.name}" />
        <antcall target="internal-create-test-suite"  />
    </target>
	
	<target name="create-service" depends="init:grailsHome" description="Create a new service">
		
		<input addproperty="service.name" message="Enter service name:" />
		
		<script language="groovy">
			def serviceName = grails.getProperty("service.name")		
			serviceName     = serviceName[0].toUpperCase() + serviceName.substring[1..-1]
		    if (serviceName.endsWith('Service')) serviceName = serviceName[0..-8]
			serviceName     = serviceName.replaceAll(" ", "" )
			grails.setProperty("service.class.name", serviceName)
		</script>
				
		<copy 	file="${grails.home}/src/grails/templates/artifacts/Service.groovy" 
				tofile="grails-app/services/${service.class.name}Service.groovy"
                overwrite="false"/>
		
		<replace 	file="grails-app/services/${service.class.name}Service.groovy" 
					token="@service.name@" 
					value="${service.class.name}" />	
		<echo>Created service: grails-app/services/${service.class.name}Service.groovy</echo>
        <property name="test.suite.name" value="${service.class.name}" />
        <antcall target="internal-create-test-suite" inheritall="true" />
    </target>
			
	<target name="create-domain-class" depends="init:grailsHome" description="Create a new domain class">
		
		<input addproperty="domain.class.name" message="Enter domain class name:" />
		
		<script language="groovy">
			def className = grails.getProperty("domain.class.name")		
			className = className[0].toUpperCase() + className.substring[1..-1]
			grails.setProperty("domain.class.name", className)
		</script>
				
		<copy 	file="${grails.home}/src/grails/templates/artifacts/DomainClass.groovy" 
				tofile="grails-app/domain/${domain.class.name}.groovy"
                overwrite="false"/>
		
		<replace 	file="grails-app/domain/${domain.class.name}.groovy" 
					token="@domain.class.name@" 
					value="${domain.class.name}" />	
		<echo>Domain class created: grails-app/domain/${domain.class.name}.groovy</echo>
        <property name="test.suite.name" value="${domain.class.name}" />
        <antcall target="internal-create-test-suite" inheritall="true" />
    </target>
	
	<target name="create-test-suite" depends="init:grailsHome" description="Create a new test suite">
		
		<input addproperty="test.suite.name" message="Enter test suite name:" />

        <antcall target="internal-create-test-suite" inheritall="true" />

    </target>

    <target name="internal-create-test-suite">
		<script language="groovy">
			def suiteName = grails.getProperty("test.suite.name")		
			suiteName = suiteName[0].toUpperCase() + suiteName.substring[1..-1]
		    if (suiteName.endsWith('Tests')) suiteName = suiteName[0..-6]
			suiteName = suiteName.replaceAll(" ", "" )
			grails.setProperty("test.suite.name", suiteName)
		</script>

		<copy 	file="${grails.home}/src/grails/templates/artifacts/Tests.groovy"
				tofile="grails-tests/${test.suite.name}Tests.groovy"
                overwrite="false"/>

		<replace 	file="grails-tests/${test.suite.name}Tests.groovy"
					token="@test.suite.name@"
					value="${test.suite.name}" />
		<echo>Created test suite: grails-tests/${test.suite.name}Tests.groovy</echo>
    </target>

    <target name="init:grailsHome">
        <property environment="env"/>
		<fail unless="env.GRAILS_HOME" message="GRAILS_HOME is not set."/>
		<property name="grails.home" location="${env.GRAILS_HOME}"/>
    </target>

    <target name="init" depends="init:grailsHome" description="Initialise the current app">
		<mkdir dir="${path}src"/>
		<mkdir dir="${path}src/java"/>
		<mkdir dir="${path}src/groovy"/>		
		<mkdir dir="${path}grails-app"/>
		<mkdir dir="${path}grails-app/controllers"/>
		<mkdir dir="${path}grails-app/services"/>		
		<mkdir dir="${path}grails-app/domain"/>
        <mkdir dir="${path}grails-app/taglib"/>
        <mkdir dir="${path}grails-app/views"/>
		<mkdir dir="${path}grails-app/views/layouts"/>		
		<mkdir dir="${path}grails-app/i18n"/>				
		<mkdir dir="${path}grails-app/conf"/>
		<mkdir dir="${path}grails-tests"/>
		<mkdir dir="${path}web-app"/>
		<mkdir dir="${path}web-app"/>
		<mkdir dir="${path}web-app"/>
		<mkdir dir="${path}web-app/js"/>
		<mkdir dir="${path}web-app/css"/>
		<mkdir dir="${path}web-app/WEB-INF/classes"/>
		<!--<mkdir dir="${path}
		"/>-->
		<!--<mkdir dir="${path}html"/>-->
		<mkdir dir="${path}lib"/>
		<mkdir dir="${path}spring"/>
		<mkdir dir="${path}hibernate"/>		
		<mkdir dir="${grails.home}/dist"/>
		
		<copy todir="${path}web-app/WEB-INF">
			<fileset dir="${grails.home}/src/war/WEB-INF">
				<include name="applicationContext.xml"/>
			</fileset>
		</copy>
		<copy todir="${path}grails-app">
			<fileset dir="${grails.home}/src/grails/grails-app" />
		</copy>		
		<copy file="${grails.home}/src/war/WEB-INF/web${servlet.version}.template.xml" tofile="${path}web-app/WEB-INF/web.template.xml"/>
		<copy file="${grails.home}/src/war/WEB-INF/sitemesh.xml" tofile="${path}web-app/WEB-INF/sitemesh.xml"/>		
		<copy todir="${path}web-app/js">
		    <fileset dir="${grails.home}/src/war/js"/>
		</copy>
		<copy todir="${path}web-app/css">
		    <fileset dir="${grails.home}/src/war/css"/>
		</copy>		
		<copy todir="${path}web-app/WEB-INF/tld">
		    <fileset dir="${grails.home}/src/war/WEB-INF/tld/${servlet.version}"/>
		    <fileset dir="${grails.home}/src/war/WEB-INF/tld" includes="spring.tld"/>
		    <fileset dir="${grails.home}/src/war/WEB-INF/tld" includes="grails.tld"/>
		</copy>		
		<copy todir="${path}spring">
			<fileset dir="${grails.home}/src/war/WEB-INF/spring">
				<include name="*.xml"/>
			</fileset>
		</copy>
		<touch file="${path}grails-app/i18n/messages.properties"></touch>
	</target>
	
	<target name="clean">
		<delete file="grails-app.war"/>
		<delete dir="tmp" />
	</target>
	
	<target name="build" depends="init:grailsHome">
		<path id="classpath">
			<fileset dir="lib"/>
			<fileset dir="${grails.home}/lib"/>
			<fileset dir="${grails.home}/dist"/>
		</path>
		<delete failonerror="false">
			<fileset dir="web-app/WEB-INF/classes"/>
		</delete>
		<javac srcdir="src/java" destdir="web-app/WEB-INF/classes" classpathref="classpath" debug="on" deprecation="on" optimize="off"/>
		
		<groovyc srcdir="src/groovy" destdir="web-app/WEB-INF/classes" classpathref="classpath" />		
	</target>
	
	<target name="test" depends="build">
		<delete dir="tmp/reports"/>
		<mkdir dir="tmp/reports"/>
		<path id="test_classpath">
			<fileset dir="lib"/>
			<fileset dir="${grails.home}/lib"/>
			<fileset dir="${grails.home}/dist"/>
			<path location="web-app/WEB-INF/classes"/>
		</path>
		<junit>
			<classpath refid="test_classpath"/>
			
			<formatter type="plain" usefile="no"/>
			<formatter type="xml"/>
			<batchtest todir="tmp/reports" fork="yes">
				<fileset dir="web-app/WEB-INF/classes" includes="**/*Tests.class" excludes="**/Abstract*"/>
			</batchtest>			
		</junit>
	</target>

	<target name="test-app" depends="package" description="Run current app's unit tests">
		<mkdir dir="${basedir}/tmp/war/WEB-INF/grails-app/tests" />		
		<copy todir="${basedir}/tmp/war/WEB-INF/grails-app/tests">
			<fileset dir="${basedir}/grails-tests/" includes="**" />
		</copy>
		<path id="test.classpath">
			<!--<pathelement location="${grails.home}/src/web-app/WEB-INF"/>-->
            <pathelement location="${basedir}/tmp/war/WEB-INF"/>
            <pathelement location="${basedir}/tmp/war/WEB-INF/classes"/>
            <fileset dir="${grails.home}/lib"/>
			<fileset dir="${grails.home}/dist"/>
			<fileset dir="lib"/>
		</path>
		<java classpathref="test.classpath" classname="grails.util.RunTests" fork="true">
<!--			<jvmarg value="-Xdebug"/>
			<jvmarg value="-Xrunjdwp:transport=dt_socket,address=50010,suspend=y,server=y"/> -->
		</java>
		<delete dir="${basedir}/tmp/war/WEB-INF/grails-app/tests"></delete>
	</target>

    <target name="dev">
        <property name="dev.run" value="true" />
    </target>

    <target name="package" depends="build">
        <mkdir dir="tmp/war"/>
        <copy todir="tmp/war">
            <fileset dir="web-app">
                <include name="**/**"/>
                <exclude name="WEB-INF/*.template.xml"/>
            </fileset>
        </copy>

        <property name="controllers.home" location="grails-app/controllers"></property>
        <property name="web.xml.template"  location="web-app/WEB-INF/web.template.xml"></property>
        <property name="target.web.xml"  location="tmp/war/WEB-INF/web.xml"></property>
        <property name="tmp.war.dir"  location="tmp/war"></property>
        <property name="project.base.dir"  location="."></property>

        <script language="groovy"><![CDATA[
            import groovy.text.SimpleTemplateEngine

            def controllersHome = grails.getProperty("controllers.home")
            def controllers = []
            def flows = []
            new File("${controllersHome}").eachFileRecurse {
                def match = it.name =~ "(\\w+)(Controller.groovy\$)"
                if(match) {
                    def controllerName = match[0][1]
                    controllerName = controllerName[0].toLowerCase() + controllerName[1..-1]
                    controllers << controllerName
                }
                match = it.name =~ "(\\w+)(PageFlow.groovy\$)"
                if(match) {
                    def flowName = match[0][1]
                    flowName = flowName[0].toLowerCase() + flowName[1..-1]
                    flows << flowName
                }
            }

            def devRun = ("true" == grails.getProperty("dev.run"))

            def binding = [ "controllers" : controllers,
                            "flows" : flows,
                            "basedir" : grails.getProperty("project.base.dir"),
                            "destdir" : grails.getProperty("tmp.war.dir"),
                            "dev" : devRun     ]
            def engine = new SimpleTemplateEngine()
            def template = engine.createTemplate( new File( grails.getProperty("web.xml.template") ).text ).make(binding)

            new File( grails.getProperty("target.web.xml") ).write( template.toString() )
        ]]></script>


        <mkdir dir="tmp/war/WEB-INF/classes"/>
        <touch file="tmp/war/WEB-INF/classes/.dummy"/>
        <mkdir dir="tmp/war/WEB-INF/lib"/>
        <touch file="tmp/war/WEB-INF/lib/.dummy"/>
        <mkdir dir="tmp/war/WEB-INF/spring"/>
        <touch file="tmp/war/WEB-INF/spring/.dummy"/>
        <mkdir dir="tmp/war/WEB-INF/tld"/>
        <mkdir dir="tmp/war/js"/>
        <copy todir="tmp/war/WEB-INF/lib">
            <fileset dir="${grails.home}/lib">
                <include name="antlr-2.7.6rc1.jar"/>
                <include name="asm.jar"/>
                <include name="asm-attrs.jar"/>
                <include name="cglib-2.1.3.jar"/>
                <include name="dom4j-1.6.1.jar"/>
                <include name="ehcache-1.1.jar"/>
                <include name="ejb-3.0-edr2.jar"/>
                <include name="hibernate3.jar"/>
                <include name="jdbc2_0-stdext.jar"/>
                <include name="jta.jar"/>
                <include name="junit.jar"/>
                <include name="asm-2.0.jar"/>
                <include name="asm-util-2.0.jar"/>
                <include name="commons-logging.jar"/>
                <include name="sitemesh-2.2.1.jar"/>
                <include name="spring-webflow.jar"/>
                <include name="spring-binding.jar"/>
                <include name="spring.jar"/>
                <include name="groovy-all-1.0-jsr-05-SNAPSHOT.jar"/>
                <include name="springmodules-sandbox.jar"/>
                <include name="standard-${servlet.version}.jar"/>
                <include name="jstl-${servlet.version}.jar"/>
                <include name="commons-lang-2.0.jar"/>
                <include name="log4j-1.2.8.jar"/>
                <include name="ognl-2.7.jar"/>
                <include name="hsqldb.jar"/>
                <include name="commons-collections-3.0.jar"/>
                <include name="commons-pool-1.2.jar"/>
                <include name="commons-dbcp-1.2.1.jar"/>
                <include name="commons-cli-1.0.jar"/>
                <include name="commons-validator.jar"/>
                <include name="commons-fileupload.jar"/>               
                <include name="jakarta-oro-2.0.8.jar"/>
            </fileset>
            <fileset dir="${grails.home}/dist"/>
            <fileset dir="lib"/>
        </copy>
        <copy todir="tmp/war/WEB-INF/grails-app">
            <fileset dir="grails-app" includes="**"/>
        </copy>
        <copy todir="tmp/war/WEB-INF/classes">
            <fileset dir="grails-app/i18n" includes="**"/>
        </copy>
        <copy todir="tmp/war/WEB-INF/spring">
            <fileset dir="spring" includes="**"/>
        </copy>
        <copy todir="tmp/war/WEB-INF/classes">
            <fileset dir="hibernate" includes="**"/>
        </copy>
        <copy todir="tmp/war/WEB-INF">
            <fileset dir="${grails.home}/src/war/WEB-INF">
                <include name="log4j.properties"/>
            </fileset>
        </copy>
    </target>

    <target name="war" depends="clean,package">
		<basename property="project.dir" file="."/>
		<jar destfile="${project.dir}.war" basedir="tmp/war" />
	</target>

    <target name="run-app:impl" depends="war">
	    <property location="tmp/war" name="tmp.war.location" />
		<basename property="project.dir" file="."/>
		
		<script language="groovy">
			import org.mortbay.jetty.*;
			import org.mortbay.http.*;		
			try {
				def server = new Server();
				def listener = new SocketListener();
				listener.setPort(8080); 
				server.addListener(listener);
				server.addWebApplication("/" + grails.getProperty("project.dir"),grails.getProperty("tmp.war.location"));
				server.start();		
				}
            catch(Throwable t) {
                t.printStackTrace();
			}
        </script>
    </target>

    <target name="wait-forever" >
        <script language="groovy">
            while(true) {
                sleep(Long.MAX_VALUE)
			}
		</script>
	</target>	

    <target name="run-app" depends="dev, package" description="Run the application locally and wait">
        <antcall target="run-app:impl" />
        <antcall target="wait-forever" />
    </target>

    <target name="create-webtest" description="Create a functional layout">
<!--
    Download WebTest distro if needed.
    Create subdirs as needed.
    Create a starter build.groovy.
    Create a suite to be started.
-->
    </target>

     <target name="generate-webtest" description="Generate a functional test from a domain class">
<!--
    Scaffold an intitial cycle of show / list / details / add / remove
    with typical verifications.
-->
    </target>

    <target name="run-webtest" depends="init:grailsHome" description="Run the functional tests for a running app">
        <!-- <parallel>
            <daemons>
                <antcall target="run-app:impl" />
            </daemons>
        </parallel>
        <echoproperties /> -->
        <java classname="groovy.ui.GroovyMain" >
            <arg line="build test"/>
            <classpath>
                <pathelement location="."/>
                <fileset dir="/java/groovy/lib" includes="*.jar"/> <!--todo: refer to groovy.home-->
                <fileset dir="${grails.home}/lib" includes="*.jar"/>
                <pathelement location="${grails.home}/downloads/webtest/lib"/>
                <fileset dir="${grails.home}/downloads/webtest/lib" includes="*.jar"/>
            </classpath>
        </java>
    </target>
</project>
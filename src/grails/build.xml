<project name="grails" default="help">

	<property name="server.port" value="8080"/>

    <property name="servlet.version" value="2.3"/>
	<property name="path" value="" />

    <taskdef name="groovyc" classname="org.codehaus.groovy.ant.Groovyc" />
    <taskdef name="groovy"  classname="org.codehaus.groovy.ant.Groovy" />

    <target name="help">
		<echo>Usage: grails [target]

Targets:
"create-app"          - Create a new grails app
"create-controller"   - Create a new controller
"create-service"      - Create a new service
"create-domain-class" - Create a new domain class
"create-taglib"		  - Create a new tag library class
"create-test-suite"   - Create a new test suite
"create-job"         - Create a quartz scheduled job
"generate-controller" - Generates a controller from a domain class
"generate-views"      - Generates the views from a domain class
"generate-all"        - Generates the all artifacts from a domain class
"install-dojo"        - Installs the Dojo toolkit into the current project
"test-app"            - Run current app's unit tests
"run-app"             - Run the application locally and wait
"create-webtest"      - Create the functional test layout
"run-webtest"         - Run the functional tests for a running app
"war"        		  - Creates a deployable Web Application Archive (WAR)
"shell"               - Opens the Grails interactive command line shell
"console"             - Opens the Grails interactive swing console
        </echo>
	</target>


    <target name="init-props">
        <property environment="env"/>
        <fail unless="env.GRAILS_HOME" message="GRAILS_HOME is not set."/>
        <property name="grails.home" location="${env.GRAILS_HOME}"/>
        <groovy >
            // reusable code blocks, stored as Closure references
            project.addReference('lower'){ it[0].toLowerCase() + it[1..-1] }
            project.addReference('caps') { it[0].toUpperCase() + it[1..-1] }
            project.addReference('normCaps') {x, y ->
                x = x.replaceAll(' ','')
                x = x[0].toUpperCase() + x[1..-1]
                if (x.endsWith(y)) x = x[0..(x.size() - y.size()-1)]
                return x
            }
        </groovy>
    </target>

    <target name="init" depends="init-props" description="Initialise the current app">
        <mkdir dir="${path}src"/>
        <mkdir dir="${path}src/java"/>
        <mkdir dir="${path}src/groovy"/>
        <mkdir dir="${path}grails-app"/>
        <mkdir dir="${path}grails-app/controllers"/>
        <mkdir dir="${path}grails-app/services"/>
        <mkdir dir="${path}grails-app/domain"/>
        <mkdir dir="${path}grails-app/taglib"/>
        <mkdir dir="${path}grails-app/views"/>
        <mkdir dir="${path}grails-app/views/layouts"/>
        <mkdir dir="${path}grails-app/i18n"/>
        <mkdir dir="${path}grails-app/conf"/>
        <mkdir dir="${path}grails-tests"/>
        <mkdir dir="${path}web-app"/>
        <mkdir dir="${path}web-app"/>
        <mkdir dir="${path}web-app"/>
        <mkdir dir="${path}web-app/js"/>
        <mkdir dir="${path}web-app/css"/>
        <mkdir dir="${path}web-app/images"/>
        <mkdir dir="${path}web-app/WEB-INF/classes"/>
        <!--<mkdir dir="${path}
"/>-->
        <!--<mkdir dir="${path}html"/>-->
        <mkdir dir="${path}lib"/>
        <mkdir dir="${path}spring"/>
        <mkdir dir="${path}hibernate"/>
        <mkdir dir="${grails.home}/dist"/>

        <copy todir="${path}web-app">
            <fileset dir="${grails.home}/src/war">
				 <include name="**/**"/>
                <exclude name="WEB-INF"/>
            </fileset>
        </copy>
		
        <copy todir="${path}web-app/WEB-INF">
            <fileset dir="${grails.home}/src/war/WEB-INF">
                <include name="applicationContext.xml"/>
            </fileset>
        </copy>
        <copy todir="${path}grails-app">
            <fileset dir="${grails.home}/src/grails/grails-app" />
        </copy>
        <copy file="${grails.home}/src/war/WEB-INF/web${servlet.version}.template.xml" tofile="${path}web-app/WEB-INF/web.template.xml"/>
        <copy file="${grails.home}/src/war/WEB-INF/sitemesh.xml" tofile="${path}web-app/WEB-INF/sitemesh.xml"/>

        <copy todir="${path}web-app/WEB-INF/tld">
            <fileset dir="${grails.home}/src/war/WEB-INF/tld/${servlet.version}"/>
            <fileset dir="${grails.home}/src/war/WEB-INF/tld" includes="spring.tld"/>
            <fileset dir="${grails.home}/src/war/WEB-INF/tld" includes="grails.tld"/>
        </copy>
        <copy todir="${path}spring">
            <fileset dir="${grails.home}/src/war/WEB-INF/spring">
                <include name="*.xml"/>
            </fileset>
        </copy>
        <touch file="${path}grails-app/i18n/messages.properties"></touch>
    </target>

    <target name="input-domain-class">
        <input addproperty="domain.class.name" message="Enter domain class name:" />
    </target>
    <target name="generate-controller" depends="package,input-domain-class" description="Generates a controller from a domain class">
            <antcall target="generate-controller:impl" />
    </target>
    <target name="generate-controller:impl" description="Generates a controller from a domain class">
        <path id="test.classpath">
			<!--<pathelement location="${grails.home}/src/web-app/WEB-INF"/>-->
            <pathelement location="${basedir}/tmp/war/WEB-INF"/>
            <pathelement location="${basedir}/tmp/war/WEB-INF/classes"/>
            <fileset dir="${grails.home}/lib"/>
			<fileset dir="${grails.home}/dist"/>
			<fileset dir="lib"/>
		</path>
		<java classpathref="test.classpath" classname="grails.util.GenerateUtils" fork="true" failonerror="true">
             <arg value="controller" />
             <arg value="${domain.class.name}" />
<!--			<jvmarg value="-Xdebug"/>
			<jvmarg value="-Xrunjdwp:transport=dt_socket,address=50010,suspend=y,server=y"/> -->
		</java>
    </target>

    <target name="generate-views" depends="package,input-domain-class" description="Generates the views from a domain class">
        <path id="test.classpath">
			<!--<pathelement location="${grails.home}/src/web-app/WEB-INF"/>-->
            <pathelement location="${basedir}/tmp/war/WEB-INF"/>
            <pathelement location="${basedir}/tmp/war/WEB-INF/classes"/>
            <fileset dir="${grails.home}/lib"/>
			<fileset dir="${grails.home}/dist"/>
			<fileset dir="lib"/>
		</path>
		<java classpathref="test.classpath" classname="grails.util.GenerateUtils" fork="true" failonerror="true">
             <arg value="all" />
             <arg value="${domain.class.name}" />
<!--			<jvmarg value="-Xdebug"/>
			<jvmarg value="-Xrunjdwp:transport=dt_socket,address=50010,suspend=y,server=y"/> -->
		</java>
    </target>

    <target name="generate-views:impl">
		<path id="test.classpath">
            <pathelement location="${basedir}/tmp/war/WEB-INF"/>
            <pathelement location="${basedir}/tmp/war/WEB-INF/classes"/>
            <fileset dir="${grails.home}/lib"/>
			<fileset dir="${grails.home}/dist"/>
			<fileset dir="lib"/>
		</path>
		<java classpathref="test.classpath" classname="grails.util.GenerateUtils" fork="true" failonerror="true">
             <arg value="view" />
             <arg value="${domain.class.name}" />
		</java>
    </target>

    <target name="generate-all" depends="package,input-domain-class" description="Generates the all artifacts from a domain class">
		<path id="test.classpath">
            <pathelement location="${basedir}/tmp/war/WEB-INF"/>
            <pathelement location="${basedir}/tmp/war/WEB-INF/classes"/>
            <fileset dir="${grails.home}/lib"/>
			<fileset dir="${grails.home}/dist"/>
			<fileset dir="lib"/>
		</path>
		<java classpathref="test.classpath" classname="grails.util.GenerateUtils" fork="true" failonerror="true">
             <arg value="all" />
             <arg value="${domain.class.name}" />
		</java>
    </target>


    <target name="create-app" depends="init-props" description="Create a new grails app">

		<input addproperty="project.name" message="Enter application name:" />

		<antcall target="init">
			<param name="path" value="${project.name}/"/>
		</antcall>

		<groovy>
			def projName = properties."project.name"
			properties."project.class.name" = project.references['lower'](projName)
		</groovy>

		<copy todir="${project.name}">
			<fileset dir="${grails.home}/src/grails/templates/ide-support/eclipse" includes="*.*" excludes=".launch" />
		</copy>
    	<copy file="${grails.home}/src/grails/templates/ide-support/eclipse/.launch" tofile="${project.name}/${project.name}.launch" />
    	
		<replace dir="${project.name}" includes="*.*" token="@grails.project.name@" value="${project.name}"/>
	</target>

	<target name="create-controller" depends="init-props" description="Create a new controller">

		<input addproperty="controller.name" message="Enter controller name:" />

		<groovy>
			def ctrlName = properties."controller.name"
			properties."controller.class.name" =  project.references['normCaps'](ctrlName, 'Controller')
			properties."controller.property.name" =  project.references['lower'](ctrlName)			
		</groovy>

		<copy 	file="${grails.home}/src/grails/templates/artifacts/Controller.groovy"
				tofile="grails-app/controllers/${controller.class.name}Controller.groovy"
                overwrite="false"/>
			
		<mkdir dir="grails-app/views/${controller.property.name}" />
		
		<replace 	file="grails-app/controllers/${controller.class.name}Controller.groovy"
					token="@controller.name@"
					value="${controller.class.name}" />
		<echo>Created controller: grails-app/controllers/${controller.class.name}Controller.groovy</echo>
        <property name="test.suite.name" value="${controller.class.name}" />
        <antcall target="internal-create-test-suite" inheritRefs="true" inheritAll="true" />
    </target>

	<target name="create-service" depends="init-props" description="Create a new service">

		<input addproperty="service.name" message="Enter service name:" />

        <groovy>
			def serviceName = properties."service.name"
			properties."service.class.name" = project.references['normCaps'](serviceName, 'Service')
		</groovy>

        <copy 	file="${grails.home}/src/grails/templates/artifacts/Service.groovy"
				tofile="grails-app/services/${service.class.name}Service.groovy"
                overwrite="false"/>

		<replace 	file="grails-app/services/${service.class.name}Service.groovy"
					token="@service.name@"
					value="${service.class.name}" />
		<echo>Created service: grails-app/services/${service.class.name}Service.groovy</echo>
        <property name="test.suite.name" value="${service.class.name}" />
        <antcall target="internal-create-test-suite" inheritRefs="true" inheritAll="true"/>
    </target>

	<target name="create-taglib" depends="init-props" description="Create a new tag library">
		<input addproperty="taglib.name" message="Enter tag library name:" />
		<groovy>
			def taglibName = properties."taglib.name"
			properties."taglib.class.name" = project.references['normCaps'](taglibName, 'TagLib')
		</groovy>
		
		<copy file="${grails.home}/src/grails/templates/artifacts/TagLib.groovy"
				tofile="grails-app/taglib/${taglib.class.name}TagLib.groovy"></copy>

		<replace	file="grails-app/taglib/${taglib.class.name}TagLib.groovy"
					token="@taglib.name@"
					value="${taglib.class.name}"></replace>
		<echo>Created taglib: grails-app/taglib/${taglib.class.name}TagLib.groovy</echo>
	</target>

	<target name="create-domain-class" depends="init-props" description="Create a new domain class">

		<input addproperty="domain.class.name" message="Enter domain class name:" />

         <groovy>
			def domainName = properties."domain.class.name"
			properties."domain.class.name" = project.references['caps'](domainName)
		</groovy>


        <copy 	file="${grails.home}/src/grails/templates/artifacts/DomainClass.groovy"
            tofile="grails-app/domain/${domain.class.name}.groovy"
            overwrite="false"/>

        <replace 	file="grails-app/domain/${domain.class.name}.groovy"
            token="@domain.class.name@"
            value="${domain.class.name}" />
        <echo>Domain class created: grails-app/domain/${domain.class.name}.groovy</echo>
        <property name="test.suite.name" value="${domain.class.name}" />
        <antcall target="internal-create-test-suite" inheritRefs="true" inheritAll="true"/>
    </target>
	
	<target name="create-job" depends="init-props" description="Create a new job">

		<input addproperty="job.class.name" message="Enter job class name:" />

         <groovy>
			def jobName = properties."job.class.name"
			properties."job.class.name" = project.references['normCaps'](jobName, 'Job')
		</groovy>

		<mkdir dir="grails-app/jobs" />
        <copy 	file="${grails.home}/src/grails/templates/artifacts/Job.groovy"
            tofile="grails-app/jobs/${job.class.name}Job.groovy"
            overwrite="false"/>

        <replace 	file="grails-app/jobs/${job.class.name}Job.groovy"
            token="@job.class.name@"
            value="${job.class.name}" />
        <echo>Schedules job created: grails-app/jobs/${job.class.name}Job.groovy</echo>
    </target>	

    <target name="create-test-suite" depends="init-props" description="Create a new test suite">

        <input addproperty="test.suite.name" message="Enter test suite name:" />

        <antcall target="internal-create-test-suite" inheritRefs="true" inheritAll="true"/>

    </target>

    <target name="internal-create-test-suite">
        <groovy>
			def suiteName = properties."test.suite.name"
			properties."test.suite.name" = project.references['normCaps']( suiteName, 'Tests' )
		</groovy>

        <copy 	file="${grails.home}/src/grails/templates/artifacts/Tests.groovy"
            tofile="grails-tests/${test.suite.name}Tests.groovy"
            overwrite="false"/>

        <replace 	file="grails-tests/${test.suite.name}Tests.groovy"
            token="@test.suite.name@"
            value="${test.suite.name}" />
        <echo>Created test suite: grails-tests/${test.suite.name}Tests.groovy</echo>
    </target>

	<target name="clean">
		<delete file="grails-app.war"/>
		<delete dir="tmp" />
		<delete failonerror="false">
			<fileset dir="web-app/WEB-INF/classes"/>
		</delete>		
	</target>

	<target name="build" depends="init-props">
		<path id="classpath">
			<fileset dir="lib"/>
			<fileset dir="${grails.home}/lib"/>
			<fileset dir="${grails.home}/dist"/>
		</path>
		<javac srcdir="src/java" destdir="web-app/WEB-INF/classes" classpathref="classpath" debug="on" deprecation="on" optimize="off"/>

		<groovyc srcdir="src/groovy" destdir="web-app/WEB-INF/classes" classpathref="classpath" />
	</target>

	<target name="tests" depends="build">
		<delete dir="tmp/reports"/>
		<mkdir dir="tmp/reports"/>
		<path id="test_classpath">
			<fileset dir="lib"/>
			<fileset dir="${grails.home}/lib"/>
			<fileset dir="${grails.home}/dist"/>
			<path location="web-app/WEB-INF/classes"/>
		</path>
		<junit>
			<classpath refid="test_classpath"/>

			<formatter type="plain" usefile="no"/>
			<formatter type="xml"/>
			<batchtest todir="tmp/reports" fork="yes">
				<fileset dir="web-app/WEB-INF/classes" includes="**/*Tests.class" excludes="**/Abstract*"/>
			</batchtest>
		</junit>
	</target>

	<target name="test-app" depends="dev,package" description="Run current app's unit tests">
		<mkdir dir="${basedir}/tmp/war/WEB-INF/grails-app/tests" />
		<copy todir="${basedir}/tmp/war/WEB-INF/grails-app/tests">
			<fileset dir="${basedir}/grails-tests/" includes="**" />
		</copy>
		<path id="test.classpath">
			<!--<pathelement location="${grails.home}/src/web-app/WEB-INF"/>-->
            <pathelement location="${basedir}/tmp/war/WEB-INF"/>
            <pathelement location="${basedir}/tmp/war/WEB-INF/grails-app/tests"/>
            <pathelement location="${basedir}/tmp/war/WEB-INF/classes"/>
            <fileset dir="${grails.home}/lib"/>
			<fileset dir="${grails.home}/ant/lib"/>
			<fileset dir="${grails.home}/dist"/>
			<fileset dir="lib"/>
		</path>
		<echo>Running tests for environment: ${grails.env}</echo>
		<java classpathref="test.classpath" classname="grails.util.RunTests" fork="true" failonerror="true">
			<jvmarg value="-Dgrails.env=${grails.env}"/>
<!--			<jvmarg value="-Xdebug"/>
			<jvmarg value="-Xrunjdwp:transport=dt_socket,address=50010,suspend=y,server=y"/> -->
		</java>
		<delete dir="${basedir}/tmp/war/WEB-INF/grails-app/tests"></delete>
	</target>
	
	<target name="shell" depends="package" description="Opens the Grails shell">
		<path id="shell.classpath">
			<!--<pathelement location="${grails.home}/src/web-app/WEB-INF"/>-->
            <pathelement location="${basedir}/tmp/war/WEB-INF"/>
            <pathelement location="${basedir}/tmp/war/WEB-INF/classes"/>
            <fileset dir="${grails.home}/lib"/>
			<fileset dir="${grails.home}/ant/lib"/>
			<fileset dir="${grails.home}/dist"/>
			<fileset dir="lib"/>
		</path>
		<java classpathref="shell.classpath" classname="grails.ui.InteractiveShell" fork="true" failonerror="true">
		</java>
	</target>	
	
	<target name="console" depends="package" description="Opens the Grails console">
		<path id="console.classpath">
			<!--<pathelement location="${grails.home}/src/web-app/WEB-INF"/>-->
            <pathelement location="${basedir}/tmp/war/WEB-INF"/>
            <pathelement location="${basedir}/tmp/war/WEB-INF/classes"/>
            <fileset dir="${grails.home}/lib"/>
			<fileset dir="${grails.home}/ant/lib"/>
			<fileset dir="${grails.home}/dist"/>
			<fileset dir="lib"/>
		</path>
		<java classpathref="console.classpath" classname="grails.ui.Console" fork="true" failonerror="true">
		</java>
	</target>		

	<target name="env-props" unless="env.props.set">
		<groovy>
			project.addReference('setEnv') { key, value ->
	            if(!ant.project.getProperty(key)) {
				    ant.project.setProperty(key,value)	
					System.setProperty(key,value)
				}
				else {
					System.setProperty(key,ant.project.getProperty(value))
				}			
			}
		</groovy>	
		<property name="env.props.set" value="true" />	
	</target>
    <target name="dev" depends="env-props" unless="env.set">
        <property name="dev.run" value="true" />
        <groovy>
			ant.project.references['setEnv']("grails.env", "development")
		</groovy>
        <property name="env.set" value="true" />
    </target>

    <target name="prod" depends="env-props" unless="env.set">
        <groovy>
			ant.project.references['setEnv']("grails.env", "production")
        </groovy>
        <property name="env.set" value="true" />
    </target>

    <target name="test" depends="env-props" unless="env.set">
        <groovy>
			ant.project.references['setEnv']("grails.env", "test")
        </groovy>
        <property name="env.set" value="true" />
    </target>

    <target name="package" depends="build">
        <mkdir dir="tmp/war"/>
        <copy todir="tmp/war">
            <fileset dir="web-app">
                <include name="**/**"/>
                <exclude name="WEB-INF/*.template.xml"/>
            </fileset>
        </copy>
        <delete dir="tmp/war/WEB-INF/grails-app/tests" failonerror="false" />
        <property name="controllers.home" location="grails-app/controllers"></property>
        <property name="web.xml.template"  location="web-app/WEB-INF/web.template.xml"></property>
        <property name="target.web.xml"  location="tmp/war/WEB-INF/web.xml"></property>
        <property name="tmp.war.dir"  location="tmp/war"></property>
        <property name="project.base.dir"  location="."></property>

        <groovy><![CDATA[
            import groovy.text.SimpleTemplateEngine

            def controllersHome = properties."controllers.home"
            def controllers = []
            def flows = []
            new File("${controllersHome}").eachFileRecurse {
                def match = it.name =~ "(\\w+)(Controller.groovy\$)"
                if(match) {
                    def controllerName = match[0][1]
                    controllerName = project.references['lower'](controllerName)
                    controllers << controllerName
                }
                match = it.name =~ "(\\w+)(PageFlow.groovy\$)"
                if(match) {
                    def flowName = match[0][1]
                    flowName = project.references['lower'](flowName)
                    flows << flowName
                }
            }

            def devRun = ("true" == properties."dev.run")

            def binding = [ "controllers" : controllers,
                            "flows" : flows,
                            "basedir" : properties."project.base.dir",
                            "destdir" : properties."tmp.war.dir",
                            "dev" : devRun     ]
            def engine = new SimpleTemplateEngine()
            def template = engine.createTemplate( new File( properties."web.xml.template" ).text ).make(binding)

            new File( properties."target.web.xml" ).write( template.toString() )
        ]]></groovy>


        <mkdir dir="tmp/war/WEB-INF/classes"/>
        <touch file="tmp/war/WEB-INF/classes/.dummy"/>
        <mkdir dir="tmp/war/WEB-INF/lib"/>
        <touch file="tmp/war/WEB-INF/lib/.dummy"/>
        <mkdir dir="tmp/war/WEB-INF/spring"/>
        <touch file="tmp/war/WEB-INF/spring/.dummy"/>
        <mkdir dir="tmp/war/WEB-INF/tld"/>
        <mkdir dir="tmp/war/js"/>
        <copy todir="tmp/war/WEB-INF/lib">
            <fileset dir="${grails.home}/lib">
                <include name="antlr-2.7.6rc1.jar"/>
                <include name="asm.jar"/>
                <include name="asm-attrs.jar"/>
                <include name="cglib-2.1.3.jar"/>
                <include name="dom4j-1.6.1.jar"/>
                <include name="ehcache-1.1.jar"/>
                <include name="ejb-3.0-edr2.jar"/>
                <include name="hibernate3.jar"/>
                <include name="jdbc2_0-stdext.jar"/>
                <include name="jta.jar"/>
                <include name="junit.jar"/>
                <include name="asm-2.0.jar"/>
                <include name="asm-util-2.0.jar"/>
                <include name="commons-logging.jar"/>
                <include name="sitemesh-2.2.1.jar"/>
                <include name="spring-webflow.jar"/>
                <include name="spring-binding.jar"/>
                <include name="spring.jar"/>
                <include name="groovy-all-1.0-RC-01-SNAPSHOT.jar"/>
                <include name="springmodules-sandbox.jar"/>
                <include name="standard-${servlet.version}.jar"/>
                <include name="jstl-${servlet.version}.jar"/>
                <include name="commons-lang-2.0.jar"/>
                <include name="log4j-1.2.8.jar"/>
                <include name="ognl-2.7.jar"/>
                <include name="hsqldb.jar"/>
                <include name="commons-collections-3.0.jar"/>
                <include name="commons-pool-1.2.jar"/>
                <include name="commons-dbcp-1.2.1.jar"/>
                <include name="commons-cli-1.0.jar"/>
                <include name="commons-validator.jar"/>
                <include name="commons-fileupload.jar"/>
                <include name="jakarta-oro-2.0.8.jar"/>
                <include name="quartz-1.5.2.jar"/>            	            	
            </fileset>
            <fileset dir="${grails.home}/dist" includes="grails-*.jar" />
            <fileset dir="lib"/>
        </copy>
        <antcall target="package:java5"></antcall>
        <copy todir="tmp/war/WEB-INF/grails-app">
            <fileset dir="grails-app" includes="**">
            	<include name="**" />
         	    <exclude name="*/messages.properties"/>            	
            </fileset>
        </copy>
    	<native2ascii 	src="grails-app/i18n/" 
	    				dest="tmp/war/WEB-INF/grails-app/i18n/" 
    					includes="messages.properties" encoding="UTF-8"/>    	
        <copy todir="tmp/war/WEB-INF/spring">
            <fileset dir="spring" includes="**"/>
        </copy>
        <copy todir="tmp/war/WEB-INF/classes">
            <fileset dir="hibernate" includes="**"/>
            <fileset dir="src/java">
            	<include name="**/**"/>
            	<exclude name="**/*.java" />
            	<exclude name="*CVS*" />
            </fileset>
        </copy>
        <copy todir="tmp/war/WEB-INF">
            <fileset dir="${grails.home}/src/war/WEB-INF">
                <include name="log4j.properties"/>
            </fileset>
        </copy>
    </target>
    <target name="package:checkj5">
        <condition property="is.java.5">
              <equals arg1="${ant.java.version}" arg2="1.5"/>
        </condition>
    </target>

    <target name="package:java5" depends="package:checkj5" if="is.java.5">
        <copy todir="tmp/war/WEB-INF/lib">
            <fileset dir="${grails.home}/lib">
                <include name="hibernate-annotations.jar"/>
                <include name="ejb3-persistence.jar"/>
            </fileset>
        </copy>
    </target>

    <target name="war" depends="clean,package,prod">
		<basename property="project.dir" file="."/>
		<groovy>
			def dataSources = new File("tmp/war/WEB-INF/grails-app/conf")
			                    .listFiles()
			                    .findAll { it.name.endsWith("DataSource.groovy") &amp;&amp;
			                               it.name!="ApplicationDataSource.groovy"}
			if(dataSources.size() == 1) {
				ant.move(file:"${dataSources[0]}",
						 tofile:"tmp/war/WEB-INF/grails-app/conf/ApplicationDataSource.groovy")
			}
			else {
				// attempt to find production
				def ds = null
				def grailsEnv = System.getProperty('grails.env')
     			ant.echo("Packaging for environment '$grailsEnv'")				
				if(grailsEnv) {
				   def name = grailsEnv[0].toUpperCase(Locale.ENGLISH)+
				              grailsEnv[1..grailsEnv.size()-1]

				   ds = dataSources.find { it.name.startsWith(name) }
				   
				}
				if(!ds) {
					ant.echo("No data source found for environment $grailsEnv. Falling back to 'production'.")
					ds = dataSources.find { it.name.startsWith("Production")}
				} 
				if(ds) {
				    dataSources.remove(ds)
				    ant.move(file:ds,tofile:"tmp/war/WEB-INF/grails-app/conf/ApplicationDataSource.groovy")
				    dataSources.each {
						ant.delete(file:it)
					}
				}
			}
		</groovy>
		<jar destfile="${project.dir}.war" basedir="tmp/war" />
		<delete>
			<fileset dir="tmp/war/WEB-INF/grails-app/conf" includes="*.groovy" />
		</delete>
	</target>

    <target name="run-app:impl">
		<basename property="project.dir" file="."/>

		<groovy>
			import org.mortbay.jetty.*
			import org.mortbay.http.*

            System.setProperty('org.mortbay.xml.XmlParser.NotValidating', 'true')
            def server = new Server()
            project.addReference('server', server)
            try {
                def listener = new SocketListener()
                listener.setPort(properties.'server.port'.toInteger())
                server.addListener(listener)
                server.addWebApplication("/" + properties."project.dir", 'tmp/war')
                server.start()
            } catch(Throwable t) {
                t.printStackTrace()
            }
        </groovy>
    </target>

    <target name="run-app:watch-context" >
    	<basename property="project.dir" file="."/>

        <groovy><![CDATA[
			import org.mortbay.jetty.*
			import org.mortbay.http.*

        	def f = new File('tmp/war/WEB-INF/web.xml')
        	long lastModified = f.lastModified()
            while(true) {
        		if(lastModified < f.lastModified()) {
        			println 'Web Context changed. Reloading...'
		        	lastModified = f.lastModified()
					def svr = HttpServer.httpServers.iterator().next()
        			def ctx = svr.getContext("/" + properties."project.dir")
        			if(ctx) {
        				println 'New Controller added. Restarting Grails context: /' + properties."project.dir"
        				ctx.stop(true)
        				ctx.start()
        			}
        			else {
        				println 'WARNING: Cannot get server context, new Controller not added'
        			}
	        	}
                sleep(2000)
			}
        ]]></groovy>
	</target>

    <target name="run-app" depends="dev, package" description="Run the application locally and wait">
        <antcall target="run-app:impl" />
        <antcall target="run-app:watch-context" />
    </target>

    <target name="check-webtest-too-old">
        <groovy><![CDATA[
            def file = new File(properties.'grails.home' + '/downloads/webtest.zip')
            assert file, "Problem creating/detecting webtest.zip"
            if (!file.exists() || new Date()-30 > new Date(file.lastModified())) {
                properties.'webtest-too-old' = true
            }
        ]]></groovy>
    </target>

    <target name="init-webtest" depends="init-props, check-webtest-too-old" if="webtest-too-old" >
        <!--
            Download WebTest distro if needed.
            Users may need to use the <setproxy/> task to when behind a firewall!
            In this case, you also need to add ant-nodeps.jar to the ant lib dir.
            Downloads are expanded below the downloads dir.
            Todo: expanded dirs need to deleted if download cache is updated
            Todo: fail gracefully if not online
            Todo: fetch by release tag
        -->
        <mkdir  dir="${grails.home}/downloads/webtest" />
        <get    dest="${grails.home}/downloads/webtest.zip" src="http://webtest.canoo.com/webtest/build.zip"
                verbose="true" usetimestamp="true"/>
        <unzip  dest="${grails.home}/downloads/webtest" src="${grails.home}/downloads/webtest.zip" overwrite="false" />

    </target>
    
    <target name="install-dojo" description="Installs the dojo framework">
		<mkdir  dir="${grails.home}/downloads/dojo" />
		<echo>Downloading Dojo 0.3...</echo>
		<get dest="${grails.home}/downloads/dojo-0.3.1-ajax.zip" src="http://download.dojotoolkit.org/release-0.3.1/dojo-0.3.1-ajax.zip"
			 verbose="true" usetimestamp="true" />
			 
		<unzip  dest="${grails.home}/downloads" src="${grails.home}/downloads/dojo-0.3.1-ajax.zip" overwrite="false" />
		
		<mkdir dir="web-app/js/dojo" />
		<mkdir dir="web-app/js/dojo/src" />
		
		<copy file="${grails.home}/downloads/dojo-0.3.1-ajax/dojo.js" tofile="web-app/js/dojo/dojo.js" />
		<copy file="${grails.home}/downloads/dojo-0.3.1-ajax/iframe_history.html" tofile="web-app/js/dojo/iframe_history.html" />
		<copy todir="web-app/js/dojo/src">
		  <fileset dir="${grails.home}/downloads/dojo-0.3.1-ajax/src" includes="**/**"/>
		</copy>
    </target>

    <target name="create-webtest" description="Create a functional testing layout" depends="init-webtest" >
        <copy todir=".">
            <fileset dir="${grails.home}/src/grails/templates/" includes="webtest/"/>
        </copy>
    </target>

    <target name="generate-webtest" description="Create a webtest for a domain class" depends="init-props" >
        <input addproperty="domain.class.name" message="Enter domain class name:" />

        <groovy>
            def domainName = properties."domain.class.name"
            properties."webtest.name" = project.references['caps'](domainName)
        </groovy>

        <copy file="${grails.home}/src/grails/templates/artifacts/WebTest.groovy"
            tofile="webtest/tests/${webtest.name}Test.groovy" />
        <replace file="webtest/tests/${webtest.name}Test.groovy"
            token="@webtest.name.caps@"
            value="${webtest.name}" />
        <replace file="webtest/tests/${webtest.name}Test.groovy"
            token="@webtest.name.lower@"
            value="${domain.class.name}" />
        <echo>Webtest created: webtest/tests/${webtest.name}Test.groovy</echo>

    </target>

    <target name="run-webtest"  description="Run the functional tests for a running app"
            depends="dev, package, run-app:impl, webtest-impl, stop-server"/>

    <target name="stop-server" >
        <groovy>
            project.references.server.stop()
        </groovy>
    </target>

    <target name="webtest-impl" >
        <java classname="groovy.ui.GroovyMain" failonerror="true">
            <arg line="webtest/tests/TestSuite"/>
            <classpath>
                <pathelement location="webtest/tests"/>
                <fileset dir="${grails.home}/lib" includes="*.jar"/>
                <fileset dir="${grails.home}/dist" includes="*.jar"/>
                <pathelement location="${grails.home}/downloads/webtest/lib"/>
                <fileset dir="${grails.home}/downloads/webtest/lib" includes="**/*.jar"/>
            </classpath>
        </java>
    </target>


</project>

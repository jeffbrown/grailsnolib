<project name="grails-build" default="package">

	<property file="build.properties"/>


    <path id="classpath">
        <fileset dir="${grails.lib}">
            <include name="*.jar"/>
        </fileset>
        <pathelement location="${grails.src.war}/WEB-INF"/>
    </path>

    <taskdef name="groovyc"  classname="org.codehaus.groovy.ant.Groovyc" classpathref="classpath" />

	<target name="clean" description="Clean the build directory.">
		<delete dir="${grails.build}"/>
		<delete dir="${grails.test.build}"/>
	</target>
	<target name="build-init">
		<mkdir dir="${grails.build}"/>		
		<mkdir dir="${grails.build}"/>
		<mkdir dir="${grails.test.build}"/>
		<mkdir dir="${grails.test.reports}"/>
		<mkdir dir="${grails.dist}"/>
	</target>

	<target name="build" depends="build-init">
		<javac debug="on" deprecation="on" destdir="${grails.build}" source="1.3" target="1.3">
			<src path="${grails.src.commons}"/>
			<src path="${grails.src.web}"/>
			<src path="${grails.src.persistence}"/>
			<src path="${grails.src.scaffolding}"/>
			<classpath refid="classpath"/>
		</javac>
        <groovyc destdir="${grails.build}" >
			<src path="${grails.src.commons}"/>
			<classpath refid="classpath"/>
		</groovyc>
		<copy todir="${grails.build}">
			<fileset dir="${grails.src.commons}" excludes="**/*.java" />
			<fileset dir="${grails.src.web}" excludes="**/*.java" />
			<fileset dir="${grails.src.persistence}" excludes="**/*.java"/>
			<fileset dir="${grails.src.scaffolding}" excludes="**/*.java"/>
		</copy>
        <antcall target="build:java5" />
    </target>

    <target name="build:checkj5">
        <condition property="is.java.5">
              <equals arg1="${ant.java.version}" arg2="1.5"/>
        </condition>
    </target>

    <target name="build:java5" depends="build:checkj5" if="is.java.5">
        <!--build java 5 sources-->
        <javac srcdir="${grails.src.tiger}" destdir="${grails.build}" classpathref="classpath" debug="on" deprecation="on" optimize="off"/>
    </target>

	<target name="build-test" depends="build">
		<javac debug="on" deprecation="on" destdir="${grails.test.build}" source="1.3" target="1.3" includes="**/*">
			<src path="${grails.test.src.commons}"/>
			<src path="${grails.test.src.web}"/>
			<src path="${grails.test.src.persistence}"/>
			<src path="${grails.test.src.scaffolding}"/>
			<classpath refid="classpath"/>
			<classpath location="${grails.build}"/>
		</javac>
	</target>

	<target name="test" depends="build-test">
        <delete dir="${grails.test.reports}"/>
        <mkdir dir="${grails.test.reports}"/>
        <junit>
			<classpath refid="classpath"/>
			<classpath location="${grails.build}"/>
			<classpath location="${grails.test.build}"/>
			<classpath location="${grails.test.src.web}"/>
			<classpath location="${grails.test.src.commons}"/>
			<classpath location="${grails.test.src.persistence}"/>
			<classpath location="${grails.test.src.scaffolding}"/>

			<formatter type="xml" />
			<batchtest todir="${grails.test.reports}" fork="yes" failureproperty="grails.test.failure">
				<fileset dir="${grails.test.build}" includes="**/*Tests.class"
                         excludes="**/Abstract*, **/ControllerScaffoldingTests.*"/>
			</batchtest>

		</junit>
        <fail if="grails.test.failure">The tests failed. Have a look at ${grails.test.reports}</fail>
    </target>

	<target name="jar" depends="build-test" description="Build the entire source, run all tests and create the Grails JAR file.">
		<delete file="${grails.dist}/${grails.dist.jar}"/>
		<jar destfile="${grails.dist}/${grails.dist.jar}" basedir="${grails.build}"/>
	</target>
	<target name="package" depends="clean,test,jar,javadoc" description="Create the release archives for Grails.">
        <antcall target="create-binary-release"/>
        <antcall target="create-source-release"/>
    </target>

    <target name="javadoc">
		<delete dir="${grails.javadoc}"/>
		<mkdir dir="${grails.javadoc}"/>
		
		<javadoc sourcepath="${grails.src.commons},${grails.src.web}" destdir="${grails.javadoc}" windowtitle="Grails ${grails.version}" source="1.3" access="package" author="true" version="true" use="true" defaultexcludes="true">
			<doctitle><![CDATA[<h1>Grails</h1>]]></doctitle>
			<bottom><![CDATA[<i>Copyright (c) 2005-2006 The Grails project</i>]]></bottom>
			<classpath refid="classpath"/>
			<packageset dir="${grails.src.commons}">
				<include name="org/codehaus/groovy/grails/**"/>
			</packageset>
			<packageset dir="${grails.src.web}">
				<include name="org/codehaus/groovy/grails/**"/>
			</packageset>
			<packageset dir="${grails.src.persistence}">
				<include name="org/codehaus/groovy/grails/**"/>
			</packageset>			
			<packageset dir="${grails.src.scaffolding}">
				<include name="org/codehaus/groovy/grails/**"/>
			</packageset>						
			<link href="http://java.sun.com/j2ee/1.4/docs/api"/>
			<link href="http://java.sun.com/j2se/1.4.2/docs/api"/>
			<link href="http://static.springframework.org/spring/docs/1.2.x/api"/>						
		</javadoc>
	</target>

    <target name="cruise" depends="package"/>

    <!-- RELEASE BUILD -->
    <target name="create-tmp-release-dir">
        <delete dir="${dir.location}" failonerror="false" quiet="true"/>
        <mkdir dir="${dir.location}"/>
    </target>

    <target name="copy-dir">
        <mkdir dir="${dir.location}"/>    	
        <copy todir="${dir.destination}" failonerror="true" overwrite="true" verbose="false">
            <fileset dir="${dir.location}">
                <exclude name="**/CVS/**"/>
            </fileset>
        </copy>
    </target>

    <target name="copy-common-release-content">
        <antcall target="copy-dir">
            <param name="dir.location" value="lib"/>
            <param name="dir.destination" value="${release.dir}/lib"/>
        </antcall>
        <antcall target="copy-dir">
            <param name="dir.location" value="bin"/>
            <param name="dir.destination" value="${release.dir}/bin"/>
        </antcall>
        <antcall target="copy-dir">
            <param name="dir.location" value="ant"/>
            <param name="dir.destination" value="${release.dir}/ant"/>
        </antcall>
        <antcall target="copy-dir">
            <param name="dir.location" value="samples"/>
            <param name="dir.destination" value="${release.dir}/samples"/>
        </antcall>
        <antcall target="copy-dir">
            <param name="dir.location" value="doc"/>
            <param name="dir.destination" value="${release.dir}/doc"/>
        </antcall>
        <copy todir="${release.dir}">
            <fileset dir=".">
                <include name="build.xml"/>
                <include name="build.properties"/>
                <include name="LICENSE"/>
                <include name="INSTALL"/>
                <include name="README"/>            	
            </fileset>
        </copy>
    </target>

    <target name="copy-exclusive-binary-release-content">
        <antcall target="copy-dir">
            <param name="dir.location" value="src/grails"/>
            <param name="dir.destination" value="${release.dir}/src/grails"/>
        </antcall>
        <antcall target="copy-dir">
            <param name="dir.location" value="src/war"/>
            <param name="dir.destination" value="${release.dir}/src/war"/>
        </antcall>
        <antcall target="copy-dir">
            <param name="dir.location" value="dist"/>
            <param name="dir.destination" value="${release.dir}/dist"/>
        </antcall>
    </target>

    <target name="copy-exclusive-source-release-content">
        <antcall target="copy-dir">
            <param name="dir.location" value="src"/>
            <param name="dir.destination" value="${release.dir}/src"/>
        </antcall>
        <antcall target="copy-dir">
            <param name="dir.location" value="test"/>
            <param name="dir.destination" value="${release.dir}/test"/>
        </antcall>
        <antcall target="copy-dir">
            <param name="dir.location" value="dist"/>
            <param name="dir.destination" value="${release.dir}/dist"/>
        </antcall>
    </target>

    <target name="create-archives">
        <delete file="${archive}.zip" failonerror="true"/>
        <zip basedir="${archive.dir}" destfile="../${archive}.zip"/>
        <delete file="${archive}.tar.gz" failonerror="true"/>
        <tar basedir="${archive.dir}" destfile="../${archive}.tar.gz" compression="gzip" longfile="gnu"/>
    </target>

    <target name="create-release-package">
        <property name="grails.release" value="${release.name}-${grails.version}"/>
        <property name="grails.release.dir" location="tmp/grails-${grails.version}"/>
        <antcall target="create-tmp-release-dir">
            <param name="dir.location" value="${grails.release.dir}"/>
        </antcall>
        <antcall target="copy-common-release-content">
            <param name="release.dir" value="${grails.release.dir}"/>
        </antcall>
        <antcall>
            <target name="${extra.target}"/>
            <param name="release.dir" value="${grails.release.dir}"/>
        </antcall>
        <antcall target="create-archives">
            <param name="archive" value="${grails.release}"/>
            <param name="archive.dir" value="tmp"/>
        </antcall>
        <delete dir="${grails.release.dir}" failonerror="true"/>
    </target>

    <target name="create-binary-release">
        <antcall target="create-release-package">
            <param name="release.name" value="grails-bin"/>
            <param name="extra.target" value="copy-exclusive-binary-release-content"/>
        </antcall>
    </target>

    <target name="create-source-release">
        <antcall target="create-release-package">
            <param name="release.name" value="grails-src"/>
            <param name="extra.target" value="copy-exclusive-source-release-content"/>
        </antcall>
    </target>

</project>
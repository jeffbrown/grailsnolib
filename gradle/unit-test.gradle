// todo Unify test tasks into one multithreaded execution unit with a custom fork frequency
// todo Add test progress listener with dot notation.

repositories {
    mavenCentral()
}

configurations {
    coverage
}

dependencies {
    testRuntime files('src/test', 'src/grails/grails-app/utils', projectDir, "src/war/WEB-INF", coreJar.archivePath)
    coverage "net.sourceforge.cobertura:cobertura:1.9.3"
}

task instrumentForCoverage {
    instrumentedClassesDir = "${sourceSets.main.classesDir}-instrumented" as File

    inputs.dir sourceSets.test.classesDir
    outputs.files instrumentedClassesDir

    cobSerFile = "${project.buildDir}/cobertura.ser"
    doFirst {
        ant {
            // delete data file for cobertura, otherwise coverage would be added
            delete(file: cobSerFile, failonerror: false)
            // delete copy of original classes
            delete(dir: instrumentedClassesDir, failonerror: false)
            // import cobertura task, so it is available in the script
            taskdef(resource: 'tasks.properties', classpath: configurations.coverage.asPath)
        }
        copy {
            from sourceSets.main.classes
            into instrumentedClassesDir
        }
        ant {
            'cobertura-instrument'(datafile: cobSerFile) {
                fileset(dir: instrumentedClassesDir) { include(name: "**/*.class") }
            }
        }
    }
}

task coverageReport {
    destinationDir = "${project.buildDirName}/reports/coverage" as File
    inputs.files instrumentForCoverage.cobSerFile
    outputs.files destinationDir

    doFirst {
        project.ant.taskdef(resource: 'tasks.properties', classpath: configurations.coverage.asPath)
        ant.'cobertura-report'(destdir: destinationDir,
                format: 'html', datafile: instrumentForCoverage.cobSerFile) {
            sourceSets.main.allJava.addToAntBuilder(ant, 'fileset')
        }
    }
}

test {
    dependsOn coreJar
    forkEvery = 30
    systemProperties = ['grails.cli.testing': "true"]
    jvmArgs = ["-server", "-Xmx1000m", "-Xms256m", "-XX:MaxPermSize=128m", "-Dgroovy.grails.joint=true"] // todo, "-Dgroovy.grails.joint=${groovy.grails.joint}"
    testReport = true
    ignoreFailures = false
    classpath = classpath
    exclude "grails/test/TestUrlMappingsTestCase.class", "grails/test/MoneyMappingTestCase.class",
            "grails/test/MultipleMappingsTestCase.class", "grails/test/ExplicitMappingTestCase.class",
            "grails/test/Grails5786TestCase.class"
}



tasks.addRule("Pattern: testCoverage will execute the corresponding test task with coverage") {String taskName ->
    if (taskName == 'testCoverage') {
        tasks.add(name: taskName).dependsOn test, coverageReport
        test.systemProperties['net.sourceforge.cobertura.datafile'] = instrumentForCoverage.cobSerFile
        test.dependsOn instrumentForCoverage
        test.classpath = project.files(tasks.instrumentForCoverage.instrumentedClassesDir) + test.classpath + project.rootProject.configurations.coverage
        coverageReport.dependsOn test
    }
}

tasks.addRule("Pattern: testSingle<Name>[Coverage] will test **/<Name>Tests.class") {String taskName ->
    if (taskName.startsWith("testSingle")) {
        if (taskName.endsWith('Coverage')) {
            tasks.add(taskName).dependsOn(testCoverage)
            println taskName.substring(10, taskName.length() - 8)
            test.include '**/' + taskName.substring(10, taskName.length() - 8) + 'Tests.class'
        } else {
            tasks.add(taskName).dependsOn(test)
            test.include '**/' + taskName.substring(10) + 'Tests.class'
        }
    }
}

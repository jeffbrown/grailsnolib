task eclipseClasspath << {
    def binOutput = "$buildDir/eclipse/bin-output"
    def testOutput = "$buildDir/eclipse/test-output"
    generateOutputDir(binOutput)
    generateOutputDir(testOutput)

    def sw = new FileWriter(".classpath")
    def pw = new PrintWriter(sw)
    def mkp = new groovy.xml.MarkupBuilder(pw)

    pw.println('&lt;?xml version="1.0" encoding="UTF-8"?&gt;')
    def added = new HashSet()

    mkp.doubleQuotes = true
    mkp.classpath {

        classpathentry(kind: "src", path: "src/commons")
        classpathentry(kind: "src", path: "src/config")
        classpathentry(kind: "src", path: "src/tiger")
        classpathentry(kind: "src", path: "src/web")
        classpathentry(kind: "src", path: "src/persistence")
        classpathentry(kind: "src", path: "src/scaffolding")
        classpathentry(kind: "src", path: "test/groovy", output: testOutput)
        classpathentry(kind: "src", path: "test/commons", output: testOutput)
        classpathentry(kind: "src", path: "test/web", output: testOutput)
        classpathentry(kind: "src", path: "test/persistence", output: testOutput)
        classpathentry(kind: "src", path: "test/scaffolding", output: testOutput)
        classpathentry(kind: "output", path: binOutput)

        classpathentry(kind: "lib", path: "lib/hibernate3.jar", sourcepath: "/HIBERNATE_HOME/src")
        added.add("hibernate3.jar")
        classpathentry(kind: "lib", path: "lib/spring-2.0.2.jar", sourcepath: "/SPRING_HOME/src")
        added.add("spring-2.0.2.jar")
        classpathentry(kind: "lib", path: "lib/spring-mock-2.0.2.jar", sourcepath: "/SPRING_HOME/mock")
        added.add("spring-mock-2.0.2.jar")

        new File('lib').eachFile {f ->
            if (!(f.directory || added.contains(f.name))) {
                classpathentry(kind: "lib", path: "lib/" + f.name)
            }
        }

        classpathentry(kind: "lib", path: "ant/lib/ant.jar")
        classpathentry(kind: "con", path: "org.eclipse.jdt.launching.JRE_CONTAINER")

        if (hasProperty("pluginDisabled")) {
            logger.warn("Eclipse plugin disabled. Adding Groovy compile targets to classpath")

            //plugin is disabled, which means you need to build
            //groovy using the ant scripts.
            //This adds the ant scripts to the classpath
            // todo Check if this still makes sense
            classpathentry(kind: "lib", path: "build/classes/core")
            classpathentry(kind: "lib", path: "build/classes/crud")
            classpathentry(kind: "lib", path: "build/classes/gorm")
            classpathentry(kind: "lib", path: "build/classes/web")
            classpathentry(kind: "lib", path: "build/classes/config")
        }

    }
}

void generateOutputDir(dirName) {
    def output = new File(dirName)
    if (!output.exists()) {
        output.mkdirs()
        logger.info("Generating Eclipse output folder " + output.path)
    }
}

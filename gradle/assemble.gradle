import org.apache.tools.ant.filters.ReplaceTokens

dependencyCache = {
	def cacheLocation = new File(gradle.gradleUserHomeDir, "cache")
	copy {
		from( cacheLocation ) {	
			def dependencyIncludes = []			
			def includeClosure = { artifact ->
				def dependency = artifact.getResolvedDependency() 	
				def file = artifact.file	
				dependencyIncludes << "${dependency.moduleGroup}/${dependency.moduleName}/*-${dependency.moduleVersion}.*"
				dependencyIncludes << "${dependency.moduleGroup}/${dependency.moduleName}/jars/${dependency.moduleName}-${dependency.moduleVersion}.jar"					
				dependencyIncludes << "${dependency.moduleGroup}/${dependency.moduleName}/bundles/${dependency.moduleName}-${dependency.moduleVersion}.jar"										
			}
			configurations.compile.resolvedConfiguration.resolvedArtifacts.each(includeClosure) 
			configurations.runtime.resolvedConfiguration.resolvedArtifacts.each(includeClosure) 								
			configurations.jsp21.resolvedConfiguration.resolvedArtifacts.each(includeClosure) 												
			includes = dependencyIncludes
		}
		into "$projectDir/lib"
	}

}

task libs(dependsOn: getTasksByName("jar", true))  {
	doFirst dependencyCache
	
    destinationDir = 'dist'
	doLast {
		copy {		
			for(project in subprojects) {
				from( project.libsDir ) {
					include "*-${version}.jar"
				}
			}		
			into 'dist'			
		}
	}
}


task pluginsFromSvn {
    dir = "$buildDir/pluginsFromSvn"
    grailsHibernateDest = "$dir/grails-hibernate-${version}.zip"
    grailsTomcatDest = "$dir/grails-tomcat-${version}.zip"
    outputs.files grailsHibernateDest, grailsTomcatDest
    doFirst {
        ant {
            mkdir(dir: dir)
			def versionTag = version.replaceAll(/\./, '_').toUpperCase()
            get(src: "http://svn.codehaus.org/grails/trunk/grails-plugins/grails-hibernate/tags/RELEASE_${versionTag}/grails-hibernate-${version}.zip",
                    dest: grailsHibernateDest, verbose: true, usetimestamp: true)
            get(src: "http://svn.codehaus.org/grails/trunk/grails-plugins/grails-tomcat/tags/RELEASE_${versionTag}/grails-tomcat-${version}.zip",
                    dest: grailsTomcatDest, verbose: true, usetimestamp: true)

        }
    }
}

binExecutables = ["cygrails", "grails", "grails-debug", "grails-debug.bat", "grails.bat"]

distSpec = copySpec {
    from(projectDir) {
        into "grails-$version"
        include 'lib/', 'gradle/', 'media/', 'samples/', 'scripts/', 'conf/', 'build.gradle', 'build.properties',
                'LICENSE', 'INSTALL', "src/", "gradlew.bat","gradle.properties"
        exclude 'ant/bin'

        // this file is accounted for later with special handling to do some token replacement
        exclude 'src/grails/grails-macros.xml'
    }
    from(projectDir) {
    	into "grails-$version"
    	include "gradlew"
    	fileMode = 0755
    }
    from(docs.destinationDir) {
        into "grails-$version/doc"
    }
    exclude "**/CVS/**"
    from(project.files(pluginsFromSvn.dir) { builtBy 'pluginsFromSvn' }) {
        into "grails-$version/plugins"
    }
    from('bin') {
        into "grails-$version/bin"
        include binExecutables
        fileMode = 0755
    }
    from('src/resources/docs/README') {
        into "grails-$version"
        filter(ReplaceTokens, tokens: ['grails.version': version])
    }
    from("src/resources/bash") {
        include "startGrails.bat", "startGrails"
        into "grails-$version/bin"
        filter(ReplaceTokens, tokens: ['grails.version': version])
        fileMode = 0755
    }
    from(libs.destinationDir) {
        into "grails-$version/dist"
        exclude "*.zip"
    }
    from("src/grails/grails-macros.xml") {
        into "grails-$version/src/grails"
        filter(ReplaceTokens, tokens: ['grails.version': version])
    }
}

task zipDist(type: Zip,dependsOn:libs) {
    from distSpec
	doFirst dependencyCache
}

task zipDoc(type: Zip) {
    appendix = 'docs'
    from docs.destinationDir
}

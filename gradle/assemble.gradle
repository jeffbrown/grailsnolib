import org.apache.tools.ant.filters.ReplaceTokens

sourceSets {

    buildScripts {
        def buildScriptsClasspath = sourceSets.main.compileClasspath + configurations.grailsScripts
        for(subproject in subprojects) {
            buildScriptsClasspath = buildScriptsClasspath + subproject.sourceSets.main.classes
        }
        compileClasspath =  buildScriptsClasspath
        classesDir = "$buildDir/compiled-scripts" as File
        groovy.srcDirs = ['scripts']
        resources.srcDirs = []
    }
}


dependencies {
    groovy group: 'org.codehaus.groovy', name: 'groovy-all', version: '1.8.0-beta-4'

	// Specs
	grailsScripts 'javax.servlet:jsp-api:2.0'
	grailsScripts 'javax.servlet:servlet-api:2.5'
	grailsScripts 'javax.servlet:jstl:1.2'
	grailsScripts 'taglibs:standard:1.1.2'
	grailsScripts 'net.sf.jsr107cache:jsr107cache:1.0'
	grailsScripts 'javax.transaction:jta:1.1'
	grailsScripts 'javax.persistence:persistence-api:1.0'
	
	// Logging
	grailsScripts 'log4j:log4j:1.2.16'
	grailsScripts 'org.slf4j:slf4j-log4j12:1.6.1'
	grailsScripts 'org.slf4j:slf4j-api:1.6.1'
	grailsScripts 'org.slf4j:jcl-over-slf4j:1.6.1'
	grailsScripts 'org.slf4j:jul-to-slf4j:1.6.1'
	
    grailsScripts( 'org.codehaus.gpars:gpars:0.9' ) {
        exclude module:'netty'
    }
	// Apache Commons
	grailsScripts 'commons-io:commons-io:1.4'

    grailsScripts "org.springframework:spring-context:${springVersion}",
                  "org.springframework:spring-core:${springVersion}",
                  "org.springframework:spring-beans:${springVersion}",
                  "org.springframework:spring-web:${springVersion}",
                  "org.springframework:spring-tx:${springVersion}",
                  "org.springframework:spring-orm:${springVersion}",
                  "org.springframework:spring-test:${springVersion}",
                  'org.tmatesoft.svnkit:svnkit:1.3.4'


    grailsScripts "org.apache.ant:ant:${antVersion}",
                  "org.apache.ant:ant-launcher:${antVersion}",
                  "org.apache.ant:ant-junit:${antVersion}",
                  "org.apache.ant:ant-nodeps:${antVersion}",
                  "org.apache.ant:ant-trax:${antVersion}",
                  "org.apache.ivy:ivy:2.2.0",
                  'org.codehaus.gant:gant_groovy1.7:1.9.3'

	grailsScripts 'org.hibernate:hibernate-annotations:3.4.0.GA',
				'org.hibernate:hibernate-commons-annotations:3.1.0.GA',
				'org.hibernate:hibernate-core:3.3.1.GA',
				'org.hibernate:hibernate-validator:3.1.0.GA',
				'org.hibernate:hibernate-ehcache:3.3.1.GA',
				'javassist:javassist:3.11.0.GA',
				'antlr:antlr:2.7.6'
}


dependencyCache = {
	def cacheLocation = new File(gradle.gradleUserHomeDir, "cache")
	copy {
		from( cacheLocation ) {	
			def dependencyIncludes = [] as Set			
			def includeClosure = { artifact ->
				def dependency = artifact.getResolvedDependency() 	
				def file = artifact.file	
				dependencyIncludes << "${dependency.moduleGroup}/${dependency.moduleName}/*-${dependency.moduleVersion}.*"
				dependencyIncludes << "${dependency.moduleGroup}/${dependency.moduleName}/jars/${dependency.moduleName}-${dependency.moduleVersion}.jar"					
				dependencyIncludes << "${dependency.moduleGroup}/${dependency.moduleName}/bundles/${dependency.moduleName}-${dependency.moduleVersion}.jar"										
			}
			for(project in subprojects) {
				project.configurations.compile.resolvedConfiguration.resolvedArtifacts.each(includeClosure) 
				project.configurations.runtime.resolvedConfiguration.resolvedArtifacts.each(includeClosure) 
				project.configurations.findByName("jsp21")?.resolvedConfiguration?.resolvedArtifacts?.each(includeClosure) 
			}
													
			includes = dependencyIncludes as List
		}
		into "$projectDir/lib"
	}

}

task populateDependencies {
	doFirst dependencyCache
}

task scriptsJar(type:Jar, dependsOn:compileBuildScriptsGroovy) {
	appendix = 'scripts'
	from sourceSets.buildScripts.classes
	destinationDir = new File('dist')
}

task libs(dependsOn: getTasksByName("jar", true))  {
	doFirst dependencyCache
	
    destinationDir = 'dist'
	doLast {
		copy {		
			for(project in subprojects) {
				from( project.libsDir ) {
					include "*-${version}.jar"
				}
			}		
			into 'dist'			
		}
		copy {
			from("$projectDir/grails-resources") {
				include 'src/grails', 'src/war'
			}			
			into projectDir			
		}
		
	}
}
libs.dependsOn scriptsJar


task pluginsFromSvn {
    dir = "$buildDir/pluginsFromSvn"
    grailsHibernateDest = "$dir/grails-hibernate-${version}.zip"
    grailsTomcatDest = "$dir/grails-tomcat-${version}.zip"
    outputs.files grailsHibernateDest, grailsTomcatDest
    doFirst {
        ant {
            mkdir(dir: dir)
			def versionTag = version.replaceAll(/\./, '_').toUpperCase()
            get(src: "http://svn.codehaus.org/grails/trunk/grails-plugins/grails-hibernate/tags/RELEASE_${versionTag}/grails-hibernate-${version}.zip",
                    dest: grailsHibernateDest, verbose: true, usetimestamp: true)
            get(src: "http://svn.codehaus.org/grails/trunk/grails-plugins/grails-tomcat/tags/RELEASE_${versionTag}/grails-tomcat-${version}.zip",
                    dest: grailsTomcatDest, verbose: true, usetimestamp: true)

        }
    }
}

binExecutables = ["cygrails", "grails", "grails-debug", "grails-debug.bat", "grails.bat"]

distSpec = copySpec {
    from(projectDir) {
        into "grails-$version"
        include 'lib/', 'gradle/', 'media/', 'samples/', 'scripts/', 'conf/', 'build.gradle', 'build.properties',
                'LICENSE', 'INSTALL', "src/", "gradlew.bat","gradle.properties"
        exclude 'ant/bin'

        // this file is accounted for later with special handling to do some token replacement
        exclude 'src/grails/grails-macros.xml'
    }
	from("$projectDir/grails-resources") {
		into "grails-$version"
		include 'src/grails', 'src/war'
	}
    from(projectDir) {
    	into "grails-$version"
    	include "gradlew"
    	fileMode = 0755
    }
    from(docs.destinationDir) {
        into "grails-$version/doc"
    }
    exclude "**/CVS/**"
    from(project.files(pluginsFromSvn.dir) { builtBy 'pluginsFromSvn' }) {
        into "grails-$version/plugins"
    }
    from('bin') {
        into "grails-$version/bin"
        include binExecutables
        fileMode = 0755
    }
    from('src/resources/docs/README') {
        into "grails-$version"
        filter(ReplaceTokens, tokens: ['grails.version': version])
    }
    from("src/resources/bash") {
        include "startGrails.bat", "startGrails"
        into "grails-$version/bin"
        filter(ReplaceTokens, tokens: ['grails.version': version])
        fileMode = 0755
    }
    from(libs.destinationDir) {
        into "grails-$version/dist"
        exclude "*.zip"
    }
    from("src/grails/grails-macros.xml") {
        into "grails-$version/src/grails"
        filter(ReplaceTokens, tokens: ['grails.version': version])
    }
}

task zipDist(type: Zip,dependsOn:libs) {
    from distSpec
	doFirst dependencyCache
}

task zipDoc(type: Zip) {
    appendix = 'docs'
    from docs.destinationDir
}
